-- 기존 테이블 삭제 (있을 경우)
DROP TABLE IF EXISTS member_schedules CASCADE;
DROP TABLE IF EXISTS raid_battles CASCADE;
DROP TABLE IF EXISTS mock_battles CASCADE;
DROP TABLE IF EXISTS bosses CASCADE;
DROP TABLE IF EXISTS members CASCADE;
DROP TABLE IF EXISTS seasons CASCADE;
DROP TABLE IF EXISTS unions CASCADE;
DROP TABLE IF EXISTS super_admin CASCADE;
DROP FUNCTION IF EXISTS update_updated_at_column CASCADE;

-- updated_at 자동 업데이트 함수 (먼저 생성)
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ language 'plpgsql';

-- 슈퍼 관리자 테이블
CREATE TABLE super_admin (
  id BIGSERIAL PRIMARY KEY,
  username VARCHAR(255) DEFAULT 'admin',
  password VARCHAR(255) NOT NULL
);

-- 유니온 테이블 (최상위)
CREATE TABLE unions (
  id SMALLSERIAL PRIMARY KEY,  -- SMALLINT로 변경
  name VARCHAR(255) UNIQUE NOT NULL,
  user_password VARCHAR(255) NOT NULL,
  admin_password VARCHAR(255) NOT NULL,
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- 시즌 테이블
CREATE TABLE seasons (
  id SMALLSERIAL PRIMARY KEY,  -- SMALLINT로 변경
  union_id SMALLINT REFERENCES unions(id) ON DELETE CASCADE,  -- SMALLINT
  name VARCHAR(255) NOT NULL,
  date DATE NOT NULL,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW(),
  deleted_at TIMESTAMP,
  UNIQUE(union_id, name)
);

-- 멤버 테이블
CREATE TABLE members (
  id BIGSERIAL PRIMARY KEY,  -- BIGINT 유지
  season_id SMALLINT REFERENCES seasons(id) ON DELETE CASCADE,  -- SMALLINT
  union_id SMALLINT REFERENCES unions(id) ON DELETE CASCADE,  -- union_id 추가
  name VARCHAR(255) NOT NULL,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW(),
  deleted_at TIMESTAMP
);

-- 멤버 스케줄 테이블
CREATE TABLE member_schedules (
  id BIGSERIAL PRIMARY KEY,  -- BIGINT 유지
  member_id BIGINT REFERENCES members(id) ON DELETE CASCADE,  -- BIGINT 유지
  season_id SMALLINT REFERENCES seasons(id) ON DELETE CASCADE,  -- SMALLINT
  union_id SMALLINT REFERENCES unions(id) ON DELETE CASCADE,  -- union_id 추가
  time_slots VARCHAR(255),
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW(),
  deleted_at TIMESTAMP,
  UNIQUE(member_id, season_id)
);

-- 보스 테이블
CREATE TABLE bosses (
  id BIGSERIAL PRIMARY KEY,  -- BIGINT 유지
  season_id SMALLINT REFERENCES seasons(id) ON DELETE CASCADE,  -- SMALLINT
  union_id SMALLINT REFERENCES unions(id) ON DELETE CASCADE,  -- union_id 추가
  name VARCHAR(255),
  attribute VARCHAR(50),
  level INTEGER,
  hp BIGINT,
  mechanic TEXT,
  "order" SMALLINT DEFAULT 0,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW(),
  deleted_at TIMESTAMP,
  UNIQUE(season_id, attribute, level)
);

-- 모의전 테이블
CREATE TABLE mock_battles (
  id BIGSERIAL PRIMARY KEY,  -- BIGINT 유지
  season_id SMALLINT REFERENCES seasons(id) ON DELETE CASCADE,  -- SMALLINT
  union_id SMALLINT REFERENCES unions(id) ON DELETE CASCADE,  -- union_id 추가
  member_name VARCHAR(255),
  boss_id BIGINT REFERENCES bosses(id) ON DELETE CASCADE,  -- BIGINT 유지
  deck_composition TEXT,
  damage BIGINT,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW(),
  deleted_at TIMESTAMP
);

-- 실전 테이블
CREATE TABLE raid_battles (
  id BIGSERIAL PRIMARY KEY,  -- BIGINT 유지
  season_id SMALLINT REFERENCES seasons(id) ON DELETE CASCADE,  -- SMALLINT
  union_id SMALLINT REFERENCES unions(id) ON DELETE CASCADE,  -- union_id 추가
  member_name VARCHAR(255),
  level INTEGER,
  boss_id BIGINT REFERENCES bosses(id) ON DELETE CASCADE,  -- BIGINT 유지
  deck_composition TEXT,
  damage BIGINT,
  timestamp TIMESTAMP DEFAULT NOW(),
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW(),
  deleted_at TIMESTAMP
);

-- REPLICA IDENTITY 설정
ALTER TABLE seasons REPLICA IDENTITY FULL;

-- 트리거 생성 (각 테이블별)
CREATE TRIGGER update_unions_updated_at BEFORE UPDATE ON unions
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_seasons_updated_at BEFORE UPDATE ON seasons
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_members_updated_at BEFORE UPDATE ON members
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_member_schedules_updated_at BEFORE UPDATE ON member_schedules
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_bosses_updated_at BEFORE UPDATE ON bosses
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_mock_battles_updated_at BEFORE UPDATE ON mock_battles
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_raid_battles_updated_at BEFORE UPDATE ON raid_battles
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- 인덱스 생성 (성능 최적화)
CREATE INDEX idx_unions_name ON unions(name);
CREATE INDEX idx_unions_updated_at ON unions(updated_at);
CREATE INDEX idx_seasons_union_id ON seasons(union_id);
CREATE INDEX idx_seasons_updated_at ON seasons(updated_at);
CREATE INDEX idx_members_season_id ON members(season_id);
CREATE INDEX idx_members_union_id ON members(union_id);  -- 추가
CREATE INDEX idx_members_updated_at ON members(updated_at);
CREATE INDEX idx_member_schedules_member_id ON member_schedules(member_id);
CREATE INDEX idx_member_schedules_season_id ON member_schedules(season_id);
CREATE INDEX idx_member_schedules_union_id ON member_schedules(union_id);  -- 추가
CREATE INDEX idx_member_schedules_updated_at ON member_schedules(updated_at);
CREATE INDEX idx_bosses_season_id ON bosses(season_id);
CREATE INDEX idx_bosses_union_id ON bosses(union_id);  -- 추가
CREATE INDEX idx_bosses_order ON bosses("order");
CREATE INDEX idx_bosses_updated_at ON bosses(updated_at);
CREATE INDEX idx_mock_battles_season_id ON mock_battles(season_id);
CREATE INDEX idx_mock_battles_union_id ON mock_battles(union_id);  -- 추가
CREATE INDEX idx_mock_battles_updated_at ON mock_battles(updated_at);
CREATE INDEX idx_raid_battles_season_id ON raid_battles(season_id);
CREATE INDEX idx_raid_battles_union_id ON raid_battles(union_id);  -- 추가
CREATE INDEX idx_raid_battles_updated_at ON raid_battles(updated_at);

-- Realtime 활성화
ALTER PUBLICATION supabase_realtime ADD TABLE unions;
ALTER PUBLICATION supabase_realtime ADD TABLE seasons;
ALTER PUBLICATION supabase_realtime ADD TABLE members;
ALTER PUBLICATION supabase_realtime ADD TABLE member_schedules;
ALTER PUBLICATION supabase_realtime ADD TABLE bosses;
ALTER PUBLICATION supabase_realtime ADD TABLE mock_battles;
ALTER PUBLICATION supabase_realtime ADD TABLE raid_battles;

-- 슈퍼 관리자 초기 데이터
INSERT INTO super_admin (password) VALUES ('admin');